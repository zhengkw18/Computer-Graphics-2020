#ifndef UTILS_H
#define UTILS_H

#include "material.hpp"
#include <mutex>
#include <random>
#include <stdlib.h>
#include <string>

#define RT 0
#define PT 1

const int ALGORITHM = PT;
const bool SPPM = false;
const bool VOLUMETRIC = false;

const bool GAMMA = true;
const bool PPM_RENDER_DIFFUSION = false;
const bool LIGHT_DECAY = false;

const double INF = 1e8;
const double EPS = 1e-8;
const double PI = 3.1415926535897932384626;

const int MAX_PHOTONTRACING_DEP = 20;
const int MAX_RAYTRACING_DEP = 20;
const int MAX_HITPOINT_DEP = 8;
const int MAX_DREFL_DEP = 2;
const int MAX_HITPOINTS = 5000000;

const int MAX_VOLUMETRIC_PHOTONS = 30000000;
const int NUM_EMIT_VOLUMETRIC_PHOTONS = 100000;
const int MAX_VOLUMETRIC_DEP = 3;
const int MAX_VOLUMETRIC_MARCHING = 300;
const double VOLUMETRIC_STEP = 0.1;
const double VOLUMETRIC_SAMPLE_DIST = 0.1;
const double VOLUMETRIC_COEFFICIENT = 0.1;
const bool VOLUMETRIC_DECAY = false;

const int NUM_DOF_SAMPLE = 64;
const int SHADE_QUALITY = 4;
const int DREFL_QUALITY = 20;
const int ITERATIONS = 5000;
const double REDUCTION = 0.7;
const int NUM_EMIT_PHOTONS = 100000;
const double SAMPLE_DIST = 0.1;
const int SPP = 8192;

const int HASH_FAC = 7;

inline double getFractionalPart(double f)
{
    return f - std::floor(f);
}
inline double DegreesToRadians(double d)
{
    return PI * d / 180;
}

inline void trim(std::string& s)
{
    std::string blanks("\f\v\r\t\n ");
    if (!s.empty()) {
        s.erase(0, s.find_first_not_of(blanks));
        s.erase(s.find_last_not_of(blanks) + 1);
    }
}

const unsigned short FaurePermutation3[3 * 3 * 3 * 3 * 3] = { 0, 81, 162, 27, 108, 189, 54, 135, 216, 9, 90, 171, 36, 117, 198, 63, 144, 225, 18, 99, 180, 45, 126, 207, 72, 153, 234, 3, 84, 165, 30, 111, 192, 57, 138, 219, 12, 93, 174, 39, 120, 201, 66, 147, 228, 21, 102, 183, 48, 129, 210, 75, 156, 237, 6, 87, 168, 33, 114, 195, 60, 141, 222, 15, 96, 177, 42, 123, 204, 69, 150, 231, 24, 105, 186, 51, 132, 213, 78, 159, 240, 1, 82, 163, 28, 109, 190, 55, 136, 217, 10, 91, 172, 37, 118, 199, 64, 145, 226, 19, 100, 181, 46, 127, 208, 73, 154, 235, 4, 85, 166, 31, 112, 193, 58, 139, 220, 13, 94, 175, 40, 121, 202, 67, 148, 229, 22, 103, 184, 49, 130, 211, 76, 157, 238, 7, 88, 169, 34, 115, 196, 61, 142, 223, 16, 97, 178, 43, 124, 205, 70, 151, 232, 25, 106, 187, 52, 133, 214, 79, 160, 241, 2, 83, 164, 29, 110, 191, 56, 137, 218, 11, 92, 173, 38, 119, 200, 65, 146, 227, 20, 101, 182, 47, 128, 209, 74, 155, 236, 5, 86, 167, 32, 113, 194, 59, 140, 221, 14, 95, 176, 41, 122, 203, 68, 149, 230, 23, 104, 185, 50, 131, 212, 77, 158, 239, 8, 89, 170, 35, 116, 197, 62, 143, 224, 17, 98, 179, 44, 125, 206, 71, 152, 233, 26, 107, 188, 53, 134, 215, 80, 161, 242 };

const unsigned short FaurePermutation5[5 * 5 * 5] = { 0, 75, 50, 25, 100, 15, 90, 65, 40, 115, 10, 85, 60, 35, 110, 5, 80, 55, 30, 105, 20, 95, 70, 45, 120, 3, 78, 53, 28, 103, 18, 93, 68, 43, 118, 13, 88, 63, 38, 113, 8, 83, 58, 33, 108, 23, 98, 73, 48, 123, 2, 77, 52, 27, 102, 17, 92, 67, 42, 117, 12, 87, 62, 37, 112, 7, 82, 57, 32, 107, 22, 97, 72, 47, 122, 1, 76, 51, 26, 101, 16, 91, 66, 41, 116, 11, 86, 61, 36, 111, 6, 81, 56, 31, 106, 21, 96, 71, 46, 121, 4, 79, 54, 29, 104, 19, 94, 69, 44, 119, 14, 89, 64, 39, 114, 9, 84, 59, 34, 109, 24, 99, 74, 49, 124 };

const unsigned short FaurePermutation7[7 * 7 * 7] = { 0, 98, 245, 147, 49, 196, 294, 14, 112, 259, 161, 63, 210, 308, 35, 133, 280, 182, 84, 231, 329, 21, 119, 266, 168, 70, 217, 315, 7, 105, 252, 154, 56, 203, 301, 28, 126, 273, 175, 77, 224, 322, 42, 140, 287, 189, 91, 238, 336, 2, 100, 247, 149, 51, 198, 296, 16, 114, 261, 163, 65, 212, 310, 37, 135, 282, 184, 86, 233, 331, 23, 121, 268, 170, 72, 219, 317, 9, 107, 254, 156, 58, 205, 303, 30, 128, 275, 177, 79, 226, 324, 44, 142, 289, 191, 93, 240, 338, 5, 103, 250, 152, 54, 201, 299, 19, 117, 264, 166, 68, 215, 313, 40, 138, 285, 187, 89, 236, 334, 26, 124, 271, 173, 75, 222, 320, 12, 110, 257, 159, 61, 208, 306, 33, 131, 278, 180, 82, 229, 327, 47, 145, 292, 194, 96, 243, 341, 3, 101, 248, 150, 52, 199, 297, 17, 115, 262, 164, 66, 213, 311, 38, 136, 283, 185, 87, 234, 332, 24, 122, 269, 171, 73, 220, 318, 10, 108, 255, 157, 59, 206, 304, 31, 129, 276, 178, 80, 227, 325, 45, 143, 290, 192, 94, 241, 339, 1, 99, 246, 148, 50, 197, 295, 15, 113, 260, 162, 64, 211, 309, 36, 134, 281, 183, 85, 232, 330, 22, 120, 267, 169, 71, 218, 316, 8, 106, 253, 155, 57, 204, 302, 29, 127, 274, 176, 78, 225, 323, 43, 141, 288, 190, 92, 239, 337, 4, 102, 249, 151, 53, 200, 298, 18, 116, 263, 165, 67, 214, 312, 39, 137, 284, 186, 88, 235, 333, 25, 123, 270, 172, 74, 221, 319, 11, 109, 256, 158, 60, 207, 305, 32, 130, 277, 179, 81, 228, 326, 46, 144, 291, 193, 95, 242, 340, 6, 104, 251, 153, 55, 202, 300, 20, 118, 265, 167, 69, 216, 314, 41, 139, 286, 188, 90, 237, 335, 27, 125, 272, 174, 76, 223, 321, 13, 111, 258, 160, 62, 209, 307, 34, 132, 279, 181, 83, 230, 328, 48, 146, 293, 195, 97, 244, 342 };

const unsigned short FaurePermutation11[11 * 11] = { 0, 77, 44, 22, 99, 55, 11, 88, 66, 33, 110, 7, 84, 51, 29, 106, 62, 18, 95, 73, 40, 117, 4, 81, 48, 26, 103, 59, 15, 92, 70, 37, 114, 2, 79, 46, 24, 101, 57, 13, 90, 68, 35, 112, 9, 86, 53, 31, 108, 64, 20, 97, 75, 42, 119, 5, 82, 49, 27, 104, 60, 16, 93, 71, 38, 115, 1, 78, 45, 23, 100, 56, 12, 89, 67, 34, 111, 8, 85, 52, 30, 107, 63, 19, 96, 74, 41, 118, 6, 83, 50, 28, 105, 61, 17, 94, 72, 39, 116, 3, 80, 47, 25, 102, 58, 14, 91, 69, 36, 113, 10, 87, 54, 32, 109, 65, 21, 98, 76, 43, 120 };

const unsigned short FaurePermutation13[13 * 13] = { 0, 52, 117, 26, 91, 143, 78, 13, 65, 130, 39, 104, 156, 4, 56, 121, 30, 95, 147, 82, 17, 69, 134, 43, 108, 160, 9, 61, 126, 35, 100, 152, 87, 22, 74, 139, 48, 113, 165, 2, 54, 119, 28, 93, 145, 80, 15, 67, 132, 41, 106, 158, 7, 59, 124, 33, 98, 150, 85, 20, 72, 137, 46, 111, 163, 11, 63, 128, 37, 102, 154, 89, 24, 76, 141, 50, 115, 167, 6, 58, 123, 32, 97, 149, 84, 19, 71, 136, 45, 110, 162, 1, 53, 118, 27, 92, 144, 79, 14, 66, 131, 40, 105, 157, 5, 57, 122, 31, 96, 148, 83, 18, 70, 135, 44, 109, 161, 10, 62, 127, 36, 101, 153, 88, 23, 75, 140, 49, 114, 166, 3, 55, 120, 29, 94, 146, 81, 16, 68, 133, 42, 107, 159, 8, 60, 125, 34, 99, 151, 86, 21, 73, 138, 47, 112, 164, 12, 64, 129, 38, 103, 155, 90, 25, 77, 142, 51, 116, 168 };

const unsigned short FaurePermutation17[17 * 17] = { 0, 153, 68, 221, 34, 187, 102, 255, 136, 17, 170, 85, 238, 51, 204, 119, 272, 9, 162, 77, 230, 43, 196, 111, 264, 145, 26, 179, 94, 247, 60, 213, 128, 281, 4, 157, 72, 225, 38, 191, 106, 259, 140, 21, 174, 89, 242, 55, 208, 123, 276, 13, 166, 81, 234, 47, 200, 115, 268, 149, 30, 183, 98, 251, 64, 217, 132, 285, 2, 155, 70, 223, 36, 189, 104, 257, 138, 19, 172, 87, 240, 53, 206, 121, 274, 11, 164, 79, 232, 45, 198, 113, 266, 147, 28, 181, 96, 249, 62, 215, 130, 283, 6, 159, 74, 227, 40, 193, 108, 261, 142, 23, 176, 91, 244, 57, 210, 125, 278, 15, 168, 83, 236, 49, 202, 117, 270, 151, 32, 185, 100, 253, 66, 219, 134, 287, 8, 161, 76, 229, 42, 195, 110, 263, 144, 25, 178, 93, 246, 59, 212, 127, 280, 1, 154, 69, 222, 35, 188, 103, 256, 137, 18, 171, 86, 239, 52, 205, 120, 273, 10, 163, 78, 231, 44, 197, 112, 265, 146, 27, 180, 95, 248, 61, 214, 129, 282, 5, 158, 73, 226, 39, 192, 107, 260, 141, 22, 175, 90, 243, 56, 209, 124, 277, 14, 167, 82, 235, 48, 201, 116, 269, 150, 31, 184, 99, 252, 65, 218, 133, 286, 3, 156, 71, 224, 37, 190, 105, 258, 139, 20, 173, 88, 241, 54, 207, 122, 275, 12, 165, 80, 233, 46, 199, 114, 267, 148, 29, 182, 97, 250, 63, 216, 131, 284, 7, 160, 75, 228, 41, 194, 109, 262, 143, 24, 177, 92, 245, 58, 211, 126, 279, 16, 169, 84, 237, 50, 203, 118, 271, 152, 33, 186, 101, 254, 67, 220, 135, 288 };

const unsigned short FaurePermutation19[19 * 19] = { 0, 209, 76, 285, 152, 38, 247, 114, 323, 171, 19, 228, 95, 304, 190, 57, 266, 133, 342, 11, 220, 87, 296, 163, 49, 258, 125, 334, 182, 30, 239, 106, 315, 201, 68, 277, 144, 353, 4, 213, 80, 289, 156, 42, 251, 118, 327, 175, 23, 232, 99, 308, 194, 61, 270, 137, 346, 15, 224, 91, 300, 167, 53, 262, 129, 338, 186, 34, 243, 110, 319, 205, 72, 281, 148, 357, 8, 217, 84, 293, 160, 46, 255, 122, 331, 179, 27, 236, 103, 312, 198, 65, 274, 141, 350, 2, 211, 78, 287, 154, 40, 249, 116, 325, 173, 21, 230, 97, 306, 192, 59, 268, 135, 344, 13, 222, 89, 298, 165, 51, 260, 127, 336, 184, 32, 241, 108, 317, 203, 70, 279, 146, 355, 6, 215, 82, 291, 158, 44, 253, 120, 329, 177, 25, 234, 101, 310, 196, 63, 272, 139, 348, 17, 226, 93, 302, 169, 55, 264, 131, 340, 188, 36, 245, 112, 321, 207, 74, 283, 150, 359, 9, 218, 85, 294, 161, 47, 256, 123, 332, 180, 28, 237, 104, 313, 199, 66, 275, 142, 351, 1, 210, 77, 286, 153, 39, 248, 115, 324, 172, 20, 229, 96, 305, 191, 58, 267, 134, 343, 12, 221, 88, 297, 164, 50, 259, 126, 335, 183, 31, 240, 107, 316, 202, 69, 278, 145, 354, 5, 214, 81, 290, 157, 43, 252, 119, 328, 176, 24, 233, 100, 309, 195, 62, 271, 138, 347, 16, 225, 92, 301, 168, 54, 263, 130, 339, 187, 35, 244, 111, 320, 206, 73, 282, 149, 358, 10, 219, 86, 295, 162, 48, 257, 124, 333, 181, 29, 238, 105, 314, 200, 67, 276, 143, 352, 3, 212, 79, 288, 155, 41, 250, 117, 326, 174, 22, 231, 98, 307, 193, 60, 269, 136, 345, 14, 223, 90, 299, 166, 52, 261, 128, 337, 185, 33, 242, 109, 318, 204, 71, 280, 147, 356, 7, 216, 83, 292, 159, 45, 254, 121, 330, 178, 26, 235, 102, 311, 197, 64, 273, 140, 349, 18, 227, 94, 303, 170, 56, 265, 132, 341, 189, 37, 246, 113, 322, 208, 75, 284, 151, 360 };

const unsigned short FaurePermutation23[23] = { 0, 15, 8, 4, 19, 10, 2, 17, 13, 6, 21, 11, 1, 16, 9, 5, 20, 12, 3, 18, 14, 7, 22 };

const unsigned short FaurePermutation29[29] = { 0, 8, 21, 12, 4, 17, 25, 2, 10, 23, 15, 6, 19, 27, 14, 1, 9, 22, 13, 5, 18, 26, 3, 11, 24, 16, 7, 20, 28 };

const unsigned short FaurePermutation31[31] = { 0, 8, 23, 12, 4, 19, 27, 14, 2, 10, 25, 17, 6, 21, 29, 15, 1, 9, 24, 13, 5, 20, 28, 16, 3, 11, 26, 18, 7, 22, 30 };

const unsigned short FaurePermutation37[37] = { 0, 21, 8, 29, 16, 4, 25, 12, 33, 2, 23, 10, 31, 19, 6, 27, 14, 35, 18, 1, 22, 9, 30, 17, 5, 26, 13, 34, 3, 24, 11, 32, 20, 7, 28, 15, 36 };

inline double Halton2(unsigned int index)
{
    index = (index << 16) | (index >> 16);
    index = ((index & 0x00ff00ff) << 8) | ((index & 0xff00ff00) >> 8);
    index = ((index & 0x0f0f0f0f) << 4) | ((index & 0xf0f0f0f0) >> 4);
    index = ((index & 0x33333333) << 2) | ((index & 0xcccccccc) >> 2);
    index = ((index & 0x55555555) << 1) | ((index & 0xaaaaaaaa) >> 1);
    union Result {
        unsigned u;
        float f;
    } result; // Write reversed bits directly into floating-point mantissa.
    result.u = 0x3f800000u | (index >> 9);
    return result.f - 1.f;
}

inline double Halton3(unsigned int index)
{
    return (FaurePermutation3[index % 243u] * 14348907u + FaurePermutation3[(index / 243u) % 243u] * 59049u + FaurePermutation3[(index / 59049u) % 243u] * 243u + FaurePermutation3[(index / 14348907u) % 243u]) * (0x1.fffffcp-1 / 3486784401u); // Results in [0,1).
}

inline double Halton5(unsigned int index)
{
    return (FaurePermutation5[index % 125u] * 1953125u + FaurePermutation5[(index / 125u) % 125u] * 15625u + FaurePermutation5[(index / 15625u) % 125u] * 125u + FaurePermutation5[(index / 1953125u) % 125u]) * (0x1.fffffcp-1 / 244140625u); // Results in [0,1).
}

inline double Halton7(unsigned int index)
{
    return (FaurePermutation7[index % 343u] * 117649u + FaurePermutation7[(index / 343u) % 343u] * 343u + FaurePermutation7[(index / 117649u) % 343u]) * (0x1.fffffcp-1 / 40353607u); // Results in [0,1).
}

inline double Halton11(unsigned int index)
{
    return (FaurePermutation11[index % 121u] * 1771561u + FaurePermutation11[(index / 121u) % 121u] * 14641u + FaurePermutation11[(index / 14641u) % 121u] * 121u + FaurePermutation11[(index / 1771561u) % 121u]) * (0x1.fffffcp-1 / 214358881u); // Results in [0,1).
}

inline double Halton13(unsigned int index)
{
    return (FaurePermutation13[index % 169u] * 4826809u + FaurePermutation13[(index / 169u) % 169u] * 28561u + FaurePermutation13[(index / 28561u) % 169u] * 169u + FaurePermutation13[(index / 4826809u) % 169u]) * (0x1.fffffcp-1 / 815730721u); // Results in [0,1).
}

inline double Halton17(unsigned int index)
{
    return (FaurePermutation17[index % 289u] * 83521u + FaurePermutation17[(index / 289u) % 289u] * 289u + FaurePermutation17[(index / 83521u) % 289u]) * (0x1.fffffcp-1 / 24137569u); // Results in [0,1).
}

inline double Halton19(unsigned int index)
{
    return (FaurePermutation19[index % 361u] * 130321u + FaurePermutation19[(index / 361u) % 361u] * 361u + FaurePermutation19[(index / 130321u) % 361u]) * (0x1.fffffcp-1 / 47045881u); // Results in [0,1).
}

inline double Halton23(unsigned int index)
{
    return (FaurePermutation23[index % 23u] * 148035889u + FaurePermutation23[(index / 23u) % 23u] * 6436343u + FaurePermutation23[(index / 529u) % 23u] * 279841u + FaurePermutation23[(index / 12167u) % 23u] * 12167u + FaurePermutation23[(index / 279841u) % 23u] * 529u + FaurePermutation23[(index / 6436343u) % 23u] * 23u + FaurePermutation23[(index / 148035889u) % 23u]) * (0x1.fffffcp-1 / 3404825447u); // Results in [0,1).
}

inline double Halton29(unsigned int index)
{
    return (FaurePermutation29[index % 29u] * 20511149u + FaurePermutation29[(index / 29u) % 29u] * 707281u + FaurePermutation29[(index / 841u) % 29u] * 24389u + FaurePermutation29[(index / 24389u) % 29u] * 841u + FaurePermutation29[(index / 707281u) % 29u] * 29u + FaurePermutation29[(index / 20511149u) % 29u]) * (0x1.fffffcp-1 / 594823321u); // Results in [0,1).
}

inline double Halton31(unsigned int index)
{
    return (FaurePermutation31[index % 31u] * 28629151u + FaurePermutation31[(index / 31u) % 31u] * 923521u + FaurePermutation31[(index / 961u) % 31u] * 29791u + FaurePermutation31[(index / 29791u) % 31u] * 961u + FaurePermutation31[(index / 923521u) % 31u] * 31u + FaurePermutation31[(index / 28629151u) % 31u]) * (0x1.fffffcp-1 / 887503681u); // Results in [0,1).
}

inline double Halton37(unsigned int index)
{
    return (FaurePermutation37[index % 37u] * 69343957u + FaurePermutation37[(index / 37u) % 37u] * 1874161u + FaurePermutation37[(index / 1369u) % 37u] * 50653u + FaurePermutation37[(index / 50653u) % 37u] * 1369u + FaurePermutation37[(index / 1874161u) % 37u] * 37u + FaurePermutation37[(index / 69343957u) % 37u]) * (0x1.fffffcp-1 / 2565726409u); // Results in [0,1).
}

#endif